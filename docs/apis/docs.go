// Code generated by swaggo/swag. DO NOT EDIT.

package apis

import "github.com/swaggo/swag/v2"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},"swagger":"2.0","info":{"description":"{{escape .Description}}","title":"{{.Title}}","termsOfService":"http://swagger.io/terms/","contact":{"name":"API Support","url":"http://www.swagger.io/support","email":"support@swagger.io"},"license":{"name":"Apache 2.0","url":"http://www.apache.org/licenses/LICENSE-2.0.html"},"version":"{{.Version}}"},"host":"{{.Host}}","basePath":"{{.BasePath}}","paths":{"/healthz":{"get":{"description":"Returns the health status of the gpud service","consumes":["application/json"],"produces":["application/json"],"tags":["health"],"summary":"Health check endpoint","operationId":"healthz","responses":{"200":{"description":"Health status","schema":{"$ref":"#/definitions/pkg_server.Healthz"}},"500":{"description":"Internal server error","schema":{"type":"object","additionalProperties":true}}}}},"/inject-fault":{"post":{"description":"Injects a fault (such as kernel messages) into the system for testing purposes","consumes":["application/json"],"produces":["application/json"],"tags":["fault-injection"],"summary":"Inject fault into the system","operationId":"injectFault","parameters":[{"description":"Fault injection request","name":"request","in":"body","required":true,"schema":{"$ref":"#/definitions/github_com_leptonai_gpud_pkg_fault-injector.Request"}}],"responses":{"200":{"description":"Fault injected successfully","schema":{"type":"object","additionalProperties":{"type":"string"}}},"400":{"description":"Bad request - invalid request body or validation error","schema":{"type":"object","additionalProperties":true}},"404":{"description":"Fault injector not set up","schema":{"type":"object","additionalProperties":true}},"500":{"description":"Internal server error","schema":{"type":"object","additionalProperties":true}}}}},"/machine-info":{"get":{"description":"Returns detailed information about the machine including hardware specifications","produces":["application/json"],"tags":["machine"],"summary":"Get machine information","operationId":"getMachineInfo","responses":{"200":{"description":"Machine information","schema":{"$ref":"#/definitions/github_com_leptonai_gpud_api_v1.MachineInfo"}},"404":{"description":"GPUd instance not found","schema":{"type":"object","additionalProperties":true}},"500":{"description":"Internal server error","schema":{"type":"object","additionalProperties":true}}}}},"/v1/components":{"get":{"description":"Returns a list of all currently registered gpud components in the system","consumes":["application/json"],"produces":["application/json"],"tags":["components"],"summary":"Get list of registered components","operationId":"getComponents","parameters":[{"enum":["application/json","application/yaml"],"type":"string","description":"Content type preference","name":"Accept","in":"header"},{"type":"string","description":"Set to 'true' for indented JSON output","name":"json-indent","in":"header"}],"responses":{"200":{"description":"List of component names","schema":{"type":"array","items":{"type":"string"}}},"400":{"description":"Bad request - invalid content type","schema":{"type":"object","additionalProperties":true}},"500":{"description":"Internal server error","schema":{"type":"object","additionalProperties":true}}}},"delete":{"description":"Deregisters a component from the system if it supports deregistration. Only components that implement the Deregisterable interface can be deregistered.","consumes":["application/json"],"produces":["application/json"],"tags":["components"],"summary":"Deregister a component","operationId":"deregisterComponent","parameters":[{"type":"string","description":"Name of the component to deregister","name":"componentName","in":"query","required":true}],"responses":{"200":{"description":"Component deregistered successfully","schema":{"type":"object","additionalProperties":true}},"400":{"description":"Bad request - component name required or component not deregisterable","schema":{"type":"object","additionalProperties":true}},"404":{"description":"Component not found","schema":{"type":"object","additionalProperties":true}},"500":{"description":"Internal server error - failed to close component","schema":{"type":"object","additionalProperties":true}}}}},"/v1/components/trigger-check":{"get":{"description":"Triggers a health check for a specific component or all components with a specific tag. Either componentName or tagName must be provided, but not both.","consumes":["application/json"],"produces":["application/json"],"tags":["components"],"summary":"Trigger component health check","operationId":"triggerComponentCheck","parameters":[{"type":"string","description":"Name of the specific component to check (mutually exclusive with tagName)","name":"componentName","in":"query"},{"type":"string","description":"Tag name to check all components with this tag (mutually exclusive with componentName)","name":"tagName","in":"query"}],"responses":{"200":{"description":"Health check results with component states","schema":{"type":"array","items":{"$ref":"#/definitions/github_com_leptonai_gpud_api_v1.ComponentHealthStates"}}},"400":{"description":"Bad request - component or tag name required (but not both)","schema":{"type":"object","additionalProperties":true}},"404":{"description":"Component not found","schema":{"type":"object","additionalProperties":true}}}}},"/v1/components/trigger-tag":{"get":{"description":"Triggers health checks for all components that have the specified tag. Returns a summary of triggered components and their overall status.","consumes":["application/json"],"produces":["application/json"],"tags":["components"],"summary":"Trigger components by tag","operationId":"triggerComponentsByTag","parameters":[{"type":"string","description":"Tag name to trigger all components with this tag","name":"tagName","in":"query","required":true}],"responses":{"200":{"description":"Trigger results with components list, exit status, and success flag","schema":{"type":"object","additionalProperties":true}},"400":{"description":"Bad request - tag name required","schema":{"type":"object","additionalProperties":true}}}}},"/v1/events":{"get":{"description":"Returns events from specified components within a time range. If no components specified, returns events from all components. Only supported components are queried.","consumes":["application/json"],"produces":["application/json"],"tags":["components"],"summary":"Get component events","operationId":"getEvents","parameters":[{"enum":["application/json","application/yaml"],"type":"string","description":"Content type preference","name":"Accept","in":"header"},{"type":"string","description":"Comma-separated list of component names to query (if empty, queries all components)","name":"components","in":"query"},{"type":"string","description":"Start time for event query (RFC3339 format, defaults to current time)","name":"startTime","in":"query"},{"type":"string","description":"End time for event query (RFC3339 format, defaults to current time)","name":"endTime","in":"query"},{"type":"string","description":"Set to 'true' for indented JSON output","name":"json-indent","in":"header"}],"responses":{"200":{"description":"Component events within the specified time range","schema":{"type":"array","items":{"$ref":"#/definitions/github_com_leptonai_gpud_api_v1.ComponentEvents"}}},"400":{"description":"Bad request - invalid content type, component parsing error, or time parsing error","schema":{"type":"object","additionalProperties":true}},"404":{"description":"Component not found","schema":{"type":"object","additionalProperties":true}},"500":{"description":"Internal server error","schema":{"type":"object","additionalProperties":true}}}}},"/v1/info":{"get":{"description":"Returns comprehensive information including events, states, and metrics for specified components. If no components specified, returns information for all components. Only supported components are included.","consumes":["application/json"],"produces":["application/json"],"tags":["components"],"summary":"Get comprehensive component information","operationId":"getInfo","parameters":[{"enum":["application/json","application/yaml"],"type":"string","description":"Content type preference","name":"Accept","in":"header"},{"type":"string","description":"Comma-separated list of component names to query (if empty, queries all components)","name":"components","in":"query"},{"type":"string","description":"Start time for query (RFC3339 format, defaults to current time)","name":"startTime","in":"query"},{"type":"string","description":"End time for query (RFC3339 format, defaults to current time)","name":"endTime","in":"query"},{"type":"string","description":"Duration string for metrics query (e.g., '30m', '1h') - defaults to 30 minutes","name":"since","in":"query"},{"type":"string","description":"Set to 'true' for indented JSON output","name":"json-indent","in":"header"}],"responses":{"200":{"description":"Component information including events, states, and metrics","schema":{"type":"array","items":{"$ref":"#/definitions/github_com_leptonai_gpud_api_v1.ComponentInfo"}}},"400":{"description":"Bad request - invalid content type, component parsing error, time parsing error, or duration parsing error","schema":{"type":"object","additionalProperties":true}},"404":{"description":"Component not found","schema":{"type":"object","additionalProperties":true}},"500":{"description":"Internal server error","schema":{"type":"object","additionalProperties":true}}}}},"/v1/metrics":{"get":{"description":"Returns metrics data for specified components within a time range. If no components specified, returns metrics for all components. Metrics are queried from the last 30 minutes by default.","consumes":["application/json"],"produces":["application/json"],"tags":["components"],"summary":"Get component metrics","operationId":"getMetrics","parameters":[{"enum":["application/json","application/yaml"],"type":"string","description":"Content type preference","name":"Accept","in":"header"},{"type":"string","description":"Comma-separated list of component names to query (if empty, queries all components)","name":"components","in":"query"},{"type":"string","description":"Duration string for metrics query (e.g., '30m', '1h') - defaults to 30 minutes","name":"since","in":"query"},{"type":"string","description":"Set to 'true' for indented JSON output","name":"json-indent","in":"header"}],"responses":{"200":{"description":"Component metrics data within the specified time range","schema":{"type":"array","items":{"$ref":"#/definitions/github_com_leptonai_gpud_api_v1.ComponentMetrics"}}},"400":{"description":"Bad request - invalid content type, component parsing error, or duration parsing error","schema":{"type":"object","additionalProperties":true}},"404":{"description":"Component not found","schema":{"type":"object","additionalProperties":true}},"500":{"description":"Internal server error - failed to read metrics","schema":{"type":"object","additionalProperties":true}}}}},"/v1/plugins":{"get":{"description":"Returns a list of all custom plugin specifications registered in the system","consumes":["application/json"],"produces":["application/json"],"tags":["plugins"],"summary":"Get custom plugin specifications","operationId":"getPluginSpecs","parameters":[{"type":"string","description":"Set to 'true' for indented JSON output","name":"json-indent","in":"header"}],"responses":{"200":{"description":"List of custom plugin specifications","schema":{"type":"array","items":{"$ref":"#/definitions/github_com_leptonai_gpud_pkg_custom-plugins.Spec"}}},"400":{"description":"Bad request - invalid content type","schema":{"type":"object","additionalProperties":true}},"500":{"description":"Internal server error","schema":{"type":"object","additionalProperties":true}}}}},"/v1/states":{"get":{"description":"Returns the current health states of specified components or all components if none specified. Only supported components are included in the response.","consumes":["application/json"],"produces":["application/json"],"tags":["components"],"summary":"Get component health states","operationId":"getHealthStates","parameters":[{"enum":["application/json","application/yaml"],"type":"string","description":"Content type preference","name":"Accept","in":"header"},{"type":"string","description":"Comma-separated list of component names to query (if empty, returns all components)","name":"components","in":"query"},{"type":"string","description":"Set to 'true' for indented JSON output","name":"json-indent","in":"header"}],"responses":{"200":{"description":"Component health states","schema":{"type":"array","items":{"$ref":"#/definitions/github_com_leptonai_gpud_api_v1.ComponentHealthStates"}}},"400":{"description":"Bad request - invalid content type or component parsing error","schema":{"type":"object","additionalProperties":true}},"404":{"description":"Component not found","schema":{"type":"object","additionalProperties":true}},"500":{"description":"Internal server error","schema":{"type":"object","additionalProperties":true}}}}}},"definitions":{"github_com_leptonai_gpud_api_v1.ComponentEvents":{"type":"object","properties":{"component":{"type":"string"},"endTime":{"type":"string"},"events":{"type":"array","items":{"$ref":"#/definitions/github_com_leptonai_gpud_api_v1.Event"}},"startTime":{"type":"string"}}},"github_com_leptonai_gpud_api_v1.ComponentHealthStates":{"type":"object","properties":{"component":{"type":"string"},"states":{"type":"array","items":{"$ref":"#/definitions/github_com_leptonai_gpud_api_v1.HealthState"}}}},"github_com_leptonai_gpud_api_v1.ComponentInfo":{"type":"object","properties":{"component":{"type":"string"},"endTime":{"type":"string"},"info":{"$ref":"#/definitions/github_com_leptonai_gpud_api_v1.Info"},"startTime":{"type":"string"}}},"github_com_leptonai_gpud_api_v1.ComponentMetrics":{"type":"object","properties":{"component":{"type":"string"},"metrics":{"type":"array","items":{"$ref":"#/definitions/github_com_leptonai_gpud_api_v1.Metric"}}}},"github_com_leptonai_gpud_api_v1.ComponentType":{"type":"string","enum":["custom-plugin"],"x-enum-varnames":["ComponentTypeCustomPlugin"]},"github_com_leptonai_gpud_api_v1.Event":{"type":"object","properties":{"component":{"description":"Component represents which component generated the event.","type":"string"},"message":{"description":"Message represents the detailed message of the event.","type":"string"},"name":{"description":"Name represents the name of the event.","type":"string"},"time":{"description":"Time represents when the event happened.","type":"string"},"type":{"description":"Type represents the type of the event.","allOf":[{"$ref":"#/definitions/github_com_leptonai_gpud_api_v1.EventType"}]}}},"github_com_leptonai_gpud_api_v1.EventType":{"type":"string","enum":["Unknown","Info","Warning","Critical","Fatal"],"x-enum-varnames":["EventTypeUnknown","EventTypeInfo","EventTypeWarning","EventTypeCritical","EventTypeFatal"]},"github_com_leptonai_gpud_api_v1.HealthState":{"type":"object","properties":{"component":{"description":"Component represents the component name.","type":"string"},"component_type":{"description":"ComponentType represents the type of the component.\nIt is either \"\" (just 'component') or \"custom-plugin\".","allOf":[{"$ref":"#/definitions/github_com_leptonai_gpud_api_v1.ComponentType"}]},"error":{"description":"Error represents the detailed error information, which will be shown\nas More Information to help analyze why it isn’t healthy.","type":"string"},"extra_info":{"description":"ExtraInfo represents the extra information of the state.","type":"object","additionalProperties":{"type":"string"}},"health":{"description":"Health represents the health level of the state,\nincluding StateHealthy, StateUnhealthy and StateDegraded.\nStateDegraded is similar to Unhealthy which also can trigger alerts\nfor users or operators, but what StateDegraded means is that the\nissue detected does not affect users’ workload.","allOf":[{"$ref":"#/definitions/github_com_leptonai_gpud_api_v1.HealthStateType"}]},"name":{"description":"Name is the name of the state,\ncan be different from the component name.","type":"string"},"raw_output":{"description":"RawOutput represents the raw output of the health checker.\ne.g., If a custom plugin runs a Python script, the raw output\nis the stdout/stderr of the script.\nThe maximum length of the raw output is 4096 bytes.","type":"string"},"reason":{"description":"Reason represents what happened or detected by GPUd if it isn’t healthy.","type":"string"},"run_mode":{"description":"RunMode is the run mode of the state.\nIt can be \"manual\" that requires manual trigger to run the check.\nOr it can be empty that runs the check periodically.","allOf":[{"$ref":"#/definitions/github_com_leptonai_gpud_api_v1.RunModeType"}]},"suggested_actions":{"description":"SuggestedActions represents the suggested actions to mitigate the issue.","allOf":[{"$ref":"#/definitions/github_com_leptonai_gpud_api_v1.SuggestedActions"}]},"time":{"description":"Time represents when the event happened.","type":"string"}}},"github_com_leptonai_gpud_api_v1.HealthStateType":{"type":"string","enum":["Healthy","Unhealthy","Degraded","Initializing"],"x-enum-varnames":["HealthStateTypeHealthy","HealthStateTypeUnhealthy","HealthStateTypeDegraded","HealthStateTypeInitializing"]},"github_com_leptonai_gpud_api_v1.Info":{"type":"object","properties":{"events":{"type":"array","items":{"$ref":"#/definitions/github_com_leptonai_gpud_api_v1.Event"}},"metrics":{"type":"array","items":{"$ref":"#/definitions/github_com_leptonai_gpud_api_v1.Metric"}},"states":{"type":"array","items":{"$ref":"#/definitions/github_com_leptonai_gpud_api_v1.HealthState"}}}},"github_com_leptonai_gpud_api_v1.MachineCPUInfo":{"type":"object","properties":{"architecture":{"type":"string"},"logicalCores":{"type":"integer"},"manufacturer":{"type":"string"},"type":{"type":"string"}}},"github_com_leptonai_gpud_api_v1.MachineDiskDevice":{"type":"object","properties":{"children":{"type":"array","items":{"type":"string"}},"fsType":{"type":"string"},"model":{"type":"string"},"mountPoint":{"type":"string"},"name":{"type":"string"},"parents":{"type":"array","items":{"type":"string"}},"partUUID":{"type":"string"},"rev":{"type":"string"},"rota":{"type":"boolean"},"serial":{"type":"string"},"size":{"type":"integer"},"type":{"type":"string"},"used":{"type":"integer"},"vendor":{"type":"string"},"wwn":{"type":"string"}}},"github_com_leptonai_gpud_api_v1.MachineDiskInfo":{"type":"object","properties":{"blockDevices":{"type":"array","items":{"$ref":"#/definitions/github_com_leptonai_gpud_api_v1.MachineDiskDevice"}},"containerRootDisk":{"description":"ContainerRootDisk is the disk device name that mounts the container root (such as \"/var/lib/kubelet\" mount point).","type":"string"}}},"github_com_leptonai_gpud_api_v1.MachineGPUInfo":{"type":"object","properties":{"architecture":{"description":"Architecture is \"blackwell\" for NVIDIA GB200.","type":"string"},"gpus":{"description":"GPUs is the GPU info of the machine.","type":"array","items":{"$ref":"#/definitions/github_com_leptonai_gpud_api_v1.MachineGPUInstance"}},"manufacturer":{"description":"Manufacturer is \"NVIDIA\" for NVIDIA GPUs (same as Brand).","type":"string"},"memory":{"type":"string"},"product":{"description":"Product may be \"NVIDIA-Graphics-Device\" for NVIDIA GB200.","type":"string"}}},"github_com_leptonai_gpud_api_v1.MachineGPUInstance":{"type":"object","properties":{"boardID":{"type":"integer"},"minorID":{"type":"string"},"sn":{"type":"string"},"uuid":{"type":"string"}}},"github_com_leptonai_gpud_api_v1.MachineInfo":{"type":"object","properties":{"bootID":{"description":"BootID is collected by GPUd.","type":"string"},"containerRuntimeVersion":{"description":"ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).","type":"string"},"cpuInfo":{"description":"CPUInfo is the CPU info of the machine.","allOf":[{"$ref":"#/definitions/github_com_leptonai_gpud_api_v1.MachineCPUInfo"}]},"cudaVersion":{"description":"CUDAVersion represents the current version of cuda library.","type":"string"},"diskInfo":{"description":"DiskInfo is the Disk info of the machine.","allOf":[{"$ref":"#/definitions/github_com_leptonai_gpud_api_v1.MachineDiskInfo"}]},"gpuDriverVersion":{"description":"GPUDriverVersion represents the current version of GPU driver installed","type":"string"},"gpuInfo":{"description":"GPUInfo is the GPU info of the machine.","allOf":[{"$ref":"#/definitions/github_com_leptonai_gpud_api_v1.MachineGPUInfo"}]},"gpudVersion":{"description":"GPUdVersion represents the current version of GPUd","type":"string"},"hostname":{"description":"Hostname is the current host of machine","type":"string"},"kernelVersion":{"description":"Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).","type":"string"},"machineID":{"description":"MachineID is collected by GPUd. It comes from /etc/machine-id or /var/lib/dbus/machine-id","type":"string"},"memoryInfo":{"description":"MemoryInfo is the memory info of the machine.","allOf":[{"$ref":"#/definitions/github_com_leptonai_gpud_api_v1.MachineMemoryInfo"}]},"nicInfo":{"description":"NICInfo is the network info of the machine.","allOf":[{"$ref":"#/definitions/github_com_leptonai_gpud_api_v1.MachineNICInfo"}]},"operatingSystem":{"description":"The Operating System reported by the node","type":"string"},"osImage":{"description":"OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).","type":"string"},"systemUUID":{"description":"SystemUUID comes from https://github.com/google/cadvisor/blob/master/utils/sysfs/sysfs.go#L442","type":"string"},"uptime":{"description":"Uptime represents when the machine up","type":"string"}}},"github_com_leptonai_gpud_api_v1.MachineMemoryInfo":{"type":"object","properties":{"totalBytes":{"type":"integer"}}},"github_com_leptonai_gpud_api_v1.MachineNICInfo":{"type":"object","properties":{"privateIPInterfaces":{"description":"PrivateIPInterfaces is the private network interface info of the machine.","type":"array","items":{"$ref":"#/definitions/github_com_leptonai_gpud_api_v1.MachineNetworkInterface"}}}},"github_com_leptonai_gpud_api_v1.MachineNetworkInterface":{"type":"object","properties":{"interface":{"description":"Interface is the network interface name of the machine.","type":"string"},"ip":{"description":"IP is the string representation of the netip.Addr of the machine.","type":"string"},"mac":{"description":"MAC is the MAC address of the machine.","type":"string"}}},"github_com_leptonai_gpud_api_v1.Metric":{"type":"object","properties":{"labels":{"type":"object","additionalProperties":{"type":"string"}},"name":{"type":"string"},"unix_seconds":{"type":"integer"},"value":{"type":"number"}}},"github_com_leptonai_gpud_api_v1.RepairActionType":{"type":"string","enum":["IGNORE_NO_ACTION_REQUIRED","REBOOT_SYSTEM","HARDWARE_INSPECTION","CHECK_USER_APP_AND_GPU"],"x-enum-varnames":["RepairActionTypeIgnoreNoActionRequired","RepairActionTypeRebootSystem","RepairActionTypeHardwareInspection","RepairActionTypeCheckUserAppAndGPU"]},"github_com_leptonai_gpud_api_v1.RunModeType":{"type":"string","enum":["auto","manual"],"x-enum-varnames":["RunModeTypeAuto","RunModeTypeManual"]},"github_com_leptonai_gpud_api_v1.SuggestedActions":{"type":"object","properties":{"description":{"description":"Description describes the issue in detail.","type":"string"},"repair_actions":{"description":"A list of repair actions to mitigate the issue.","type":"array","items":{"$ref":"#/definitions/github_com_leptonai_gpud_api_v1.RepairActionType"}}}},"github_com_leptonai_gpud_pkg_custom-plugins.JSONPath":{"type":"object","properties":{"expect":{"description":"Expect defines the expected field \"value\" match rule.\n\nIt not set, the field value is not checked,\nwhich means \"missing field\" for this query does not\nmake the health state to be \"Unhealthy\".\n\nIf set, the field value must be matched for this rule.\nIn such case, the \"missing field\" or \"mismatch\" make\nthe health state to be \"Unhealthy\".","allOf":[{"$ref":"#/definitions/github_com_leptonai_gpud_pkg_custom-plugins.MatchRule"}]},"field":{"description":"Field defines the field name to use in the extra_info data\nfor this JSON path query output.","type":"string"},"query":{"description":"Query defines the JSONPath query path to extract with.\nref. https://pkg.go.dev/github.com/PaesslerAG/jsonpath#section-readme\nref. https://en.wikipedia.org/wiki/JSONPath\nref. https://goessner.net/articles/JsonPath/","type":"string"},"suggested_actions":{"description":"SuggestedActions maps from the suggested action name,\nto the match rule for the field value.\n\nIf the field value matches the rule,\nthe health state reports the corresponding\nsuggested action (the key of the matching rule).","type":"object","additionalProperties":{"$ref":"#/definitions/github_com_leptonai_gpud_pkg_custom-plugins.MatchRule"}}}},"github_com_leptonai_gpud_pkg_custom-plugins.MatchRule":{"type":"object","properties":{"regex":{"description":"Regex is the regex to match the output.","type":"string"}}},"github_com_leptonai_gpud_pkg_custom-plugins.Plugin":{"type":"object","properties":{"parser":{"description":"Parser is the parser for the plugin output.\nIf not set, the default prefix parser is used.","allOf":[{"$ref":"#/definitions/github_com_leptonai_gpud_pkg_custom-plugins.PluginOutputParseConfig"}]},"steps":{"description":"Steps is a sequence of steps to run for this plugin.\nMultiple steps are executed in order.\nIf a step fails, the execution stops and the error is returned.\nWhich means, the final success requires all steps to succeed.","type":"array","items":{"$ref":"#/definitions/github_com_leptonai_gpud_pkg_custom-plugins.Step"}}}},"github_com_leptonai_gpud_pkg_custom-plugins.PluginOutputParseConfig":{"type":"object","properties":{"json_paths":{"description":"JSONPaths is a list of JSON paths to the output fields.\nEach entry has a FieldName (the output field name you want to assign e.g. \"name\")\nand a QueryPath (the JSON path you want to extract with e.g. \"$.name\").","type":"array","items":{"$ref":"#/definitions/github_com_leptonai_gpud_pkg_custom-plugins.JSONPath"}},"log_path":{"description":"LogPath is an optional path to a file where the plugin output will be logged.\nIf set, the raw plugin output will be appended to this file.","type":"string"}}},"github_com_leptonai_gpud_pkg_custom-plugins.RunBashScript":{"type":"object","properties":{"content_type":{"description":"ContentType is the content encode type of the script.\nPossible values: \"plaintext\", \"base64\".","type":"string"},"script":{"description":"Script is the script to run for this job.\nAssumed to be base64 encoded.","type":"string"}}},"github_com_leptonai_gpud_pkg_custom-plugins.Spec":{"type":"object","properties":{"component_list":{"description":"ComponentList is a list of component names for SpecTypeComponentList.\nEach item can be a simple name or \"name:param\" format.\nFor component list, tags can be specified in the format \"name#run_mode[tag1,tag2]:param\"","type":"array","items":{"type":"string"}},"component_list_file":{"description":"ComponentListFile is a path to a file containing component names for SpecTypeComponentList.\nEach line can be a simple name or \"name:param\" format.\nFor component list file, tags can be specified in the format \"name#run_mode[tag1,tag2]:param\"","type":"string"},"health_state_plugin":{"description":"HealthStatePlugin defines the plugin instructions\nto evaluate the health state of this plugin,\nwhich is translated into an GPUd /states API response.","allOf":[{"$ref":"#/definitions/github_com_leptonai_gpud_pkg_custom-plugins.Plugin"}]},"interval":{"description":"Interval is the interval for the script execution.\nFor init plugin that only runs once at the server start,\nthis value is ignored.\nSimilarly, if set to zero, it runs only once.","allOf":[{"$ref":"#/definitions/v1.Duration"}]},"plugin_name":{"description":"PluginName describes the plugin.\nIt is used for generating the component name.","type":"string"},"plugin_type":{"description":"PluginType defines the plugin type.\nPossible values: \"init\", \"component\".","type":"string"},"run_mode":{"description":"RunMode defines the run mode of the plugin.\nPossible values: \"auto\", \"manual\".\n\nRunMode is set to \"auto\" to run the plugin periodically, with the specified interval.\n\nRunMode is set to \"manual\" to run the plugin only when explicitly triggered.\nThe manual mode plugin is only registered but not run periodically.\n- GPUd does not run this even once.\n- GPUd does not run this periodically.\n\nThis \"auto\" mode is only applicable to \"component\" type plugins.\nThis \"auto\" mode is not applicable to \"init\" type plugins.\n\nThe \"init\" type plugins are always run only once.\nThis \"manual\" mode is only applicable to \"component\" type plugins.\nThis \"manual\" mode is not applicable to \"init\" type plugins.","type":"string"},"tags":{"description":"Tags is a list of tags associated with this component.\nTags can be used to group and trigger components together.\nFor component list type, tags can also be specified in the run mode format.","type":"array","items":{"type":"string"}},"timeout":{"description":"Timeout is the timeout for the script execution.\nIf zero, it uses the default timeout (1-minute).","allOf":[{"$ref":"#/definitions/v1.Duration"}]},"type":{"type":"string"}}},"github_com_leptonai_gpud_pkg_custom-plugins.Step":{"type":"object","properties":{"name":{"description":"Name is the name of the step.","type":"string"},"run_bash_script":{"description":"RunBashScript is the bash script to run for this step.","allOf":[{"$ref":"#/definitions/github_com_leptonai_gpud_pkg_custom-plugins.RunBashScript"}]}}},"github_com_leptonai_gpud_pkg_fault-injector.Request":{"type":"object","properties":{"kernel_message":{"description":"KernelMessage is the kernel message to inject.","allOf":[{"$ref":"#/definitions/github_com_leptonai_gpud_pkg_kmsg_writer.KernelMessage"}]},"xid":{"description":"XID is the XID to inject.","allOf":[{"$ref":"#/definitions/github_com_leptonai_gpud_pkg_fault-injector.XIDToInject"}]}}},"github_com_leptonai_gpud_pkg_fault-injector.XIDToInject":{"type":"object","properties":{"id":{"type":"integer"}}},"github_com_leptonai_gpud_pkg_kmsg_writer.KernelMessage":{"type":"object","properties":{"message":{"description":"Message is the message of the kernel message.","type":"string"},"priority":{"description":"Priority is the priority of the kernel message.\nref. https://github.com/torvalds/linux/blob/master/tools/include/linux/kern_levels.h#L8-L15","allOf":[{"$ref":"#/definitions/github_com_leptonai_gpud_pkg_kmsg_writer.KernelMessagePriority"}]}}},"github_com_leptonai_gpud_pkg_kmsg_writer.KernelMessagePriority":{"type":"string","enum":["KERN_EMERG","KERN_ALERT","KERN_CRIT","KERN_ERR","KERN_WARNING","KERN_NOTICE","KERN_INFO","KERN_DEBUG","KERN_DEFAULT"],"x-enum-varnames":["KernelMessagePriorityEmerg","KernelMessagePriorityAlert","KernelMessagePriorityCrit","KernelMessagePriorityError","KernelMessagePriorityWarning","KernelMessagePriorityNotice","KernelMessagePriorityInfo","KernelMessagePriorityDebug","KernelMessagePriorityDefault"]},"pkg_server.Healthz":{"type":"object","properties":{"status":{"type":"string"},"version":{"type":"string"}}},"v1.Duration":{"type":"object","properties":{"time.Duration":{"type":"integer","enum":[-9223372036854775808,9223372036854775807,1,1000,1000000,1000000000,60000000000,3600000000000],"x-enum-varnames":["minDuration","maxDuration","Nanosecond","Microsecond","Millisecond","Second","Minute","Hour"]}}}}}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:15132",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "GPUd API",
	Description:      "GPU monitoring and management daemon API",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
