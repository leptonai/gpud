// Package providers contains machine/cloud providers.
package providers

import (
	"context"
	"io"

	"github.com/olekukonko/tablewriter"
)

// Detector defines a provider detector interface.
type Detector interface {
	// Name returns the name of the provider.
	Name() string
	// Provider returns a non-empty string and no error,
	// if a provider is successfully detected.
	Provider(context.Context) (string, error)
	// PublicIPv4 returns a non-empty string and no error,
	// if a public IPv4 is successfully detected.
	PublicIPv4(context.Context) (string, error)
	// PrivateIPv4 returns a non-empty string and no error,
	// if a private IPv4 is successfully detected.
	PrivateIPv4(context.Context) (string, error)
	// VMEnvironment returns a non-empty string and no error,
	// if a VM environment is successfully detected.
	// e.g., "azEnvironment" as "AZUREPUBLICCLOUD" for Azure.
	VMEnvironment(context.Context) (string, error)
	// InstanceID returns an instance id generated by provider.
	InstanceID(ctx context.Context) (string, error)
}

// Info defines a provider info data.
type Info struct {
	Provider      string `json:"provider"`
	PublicIP      string `json:"public_ip"`
	PrivateIP     string `json:"private_ip"`
	VMEnvironment string `json:"vm_environment"`
	InstanceID    string `json:"instance_id"`
}

func (i *Info) RenderTable(wr io.Writer) {
	if i == nil {
		return
	}

	table := tablewriter.NewWriter(wr)
	table.SetAlignment(tablewriter.ALIGN_CENTER)
	table.Append([]string{"Provider", i.Provider})
	table.Append([]string{"Public IP", i.PublicIP})
	table.Append([]string{"Private IP", i.PrivateIP})
	table.Append([]string{"VM Environment", i.VMEnvironment})
	table.Append([]string{"Instance ID", i.InstanceID})
	table.Render()
}
